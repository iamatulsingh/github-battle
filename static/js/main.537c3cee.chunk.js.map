{"version":3,"sources":["contexts/theme.js","components/Loading.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","Consumer","Provider","ThemeConsumer","ThemeProvider","styles","content","fontSize","position","left","right","marginTop","textAlign","Loading","state","props","text","this","speed","interval","window","setInterval","setState","clearInterval","style","Component","defaultProps","activeStyle","color","Nav","theme","toggleTheme","className","to","exact","onClick","Popular","lazy","Battle","Results","App","value","Suspense","fallback","path","component","render","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qHAAA,+EAEA,EAFA,OAE+BA,EAAMC,gBAA7BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAELC,EAAgBF,EAChBG,EAAgBF,G,qHCFvBG,EAAS,CACbC,QAAS,CACPC,SAAU,OACVC,SAAU,WACVC,KAAM,IACNC,MAAO,IACPC,UAAW,OACXC,UAAW,WAIMC,E,4MACnBC,MAAQ,CAAER,QAAS,EAAKS,MAAMC,M,uDAE9B,WAAqB,IAAD,OAClB,EAAwBC,KAAKF,MAArBG,EAAR,EAAQA,MAAOF,EAAf,EAAeA,KAEfC,KAAKE,SAAWC,OAAOC,aAAY,WACjC,EAAKP,MAAMR,UAAYU,EAAO,MAC1B,EAAKM,SAAS,CAAEhB,QAASU,IACzB,EAAKM,UAAS,kBAAkB,CAAEhB,QAApB,EAAGA,QAAoC,UACxDY,K,kCAGL,WACEE,OAAOG,cAAcN,KAAKE,Y,oBAG5B,WACE,OACE,uBAAGK,MAAOnB,EAAOC,SACdW,KAAKH,MAAMR,a,GApBiBP,IAAM0B,WA+B3CZ,EAAQa,aAAe,CACrBV,KAAM,UACNE,MAAO,M,wNC3CHS,EAAc,CAClBC,MAAO,oBAGM,SAASC,IACtB,OACE,kBAAC,IAAD,MACG,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAV,OACC,yBAAKC,UAAU,qBACb,wBAAIA,UAAU,WACZ,4BACE,kBAAC,IAAD,CACEC,GAAG,IACHC,OAAK,EACLP,YAAaA,EACbK,UAAU,YAJZ,YAQF,4BACE,kBAAC,IAAD,CACEC,GAAG,UACHN,YAAaA,EACbK,UAAU,YAHZ,YAQJ,4BACER,MAAO,CAACjB,SAAU,IAClByB,UAAU,YACVG,QAASJ,GAEE,UAAVD,EAAoB,eAAO,oB,mBC1BlCM,EAAUrC,IAAMsC,MAAK,kBAAM,sDAC3BC,EAASvC,IAAMsC,MAAK,kBAAM,sDAC1BE,EAAUxC,IAAMsC,MAAK,kBAAM,sDAEZG,E,4MACnB1B,MAAQ,CACNgB,MAAO,QACPC,YAAa,WACX,EAAKT,UAAS,kBAAgB,CAC5BQ,MAAiB,UADL,EAAGA,MACY,OAAS,c,4CAK1C,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAeW,MAAOxB,KAAKH,OACzB,yBAAKkB,UAAWf,KAAKH,MAAMgB,OACzB,yBAAKE,UAAU,aACb,kBAACH,EAAD,MAEA,kBAAC,IAAMa,SAAP,CAAgBC,SAAU,kBAAC9B,EAAA,EAAD,OACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqB,OAAK,EAACU,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOF,OAAK,EAACU,KAAK,UAAUC,UAAWP,IACvC,kBAAC,IAAD,CAAOM,KAAK,kBAAkBC,UAAWN,IACzC,kBAAC,IAAD,CAAOO,OAAQ,kBAAM,gD,GAvBN/C,IAAM0B,WCHnBsB,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASL,OAAO,kBAAC,EAAD,MAASM,SAASC,eAAe,QD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.537c3cee.chunk.js","sourcesContent":["import React from 'react'\n\nconst { Consumer, Provider } = React.createContext()\n\nexport const ThemeConsumer = Consumer\nexport const ThemeProvider = Provider","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst styles = {\n  content: {\n    fontSize: '35px',\n    position: 'absolute',\n    left: '0',\n    right: '0',\n    marginTop: '20px',\n    textAlign: 'center',\n  }\n}\n\nexport default class Loading extends React.Component {\n  state = { content: this.props.text }\n\n  componentDidMount() {\n    const { speed, text } = this.props\n\n    this.interval = window.setInterval(() => {\n      this.state.content === text + '...'\n        ? this.setState({ content: text })\n        : this.setState(({ content }) => ({ content: content + '.' }))\n    }, speed)\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.interval)\n  }\n\n  render() {\n    return (\n      <p style={styles.content}>\n        {this.state.content}\n      </p>\n    )\n  }\n}\n\nLoading.propTypes = {\n  text: PropTypes.string.isRequired,\n  speed: PropTypes.number.isRequired,\n}\n\nLoading.defaultProps = {\n  text: 'Loading',\n  speed: 300\n}","import React from 'react'\nimport { ThemeConsumer } from '../contexts/theme'\nimport { NavLink } from 'react-router-dom'\n\nconst activeStyle = {\n  color: 'rgb(187, 46, 31)'\n}\n\nexport default function Nav () {\n  return (\n    <ThemeConsumer>\n      {({ theme, toggleTheme }) => (\n        <nav className='row space-between'>\n          <ul className='row nav'>\n            <li>\n              <NavLink\n                to='/'\n                exact\n                activeStyle={activeStyle}\n                className='nav-link'>\n                  Popular\n              </NavLink>\n            </li>\n            <li>\n              <NavLink\n                to='/battle'\n                activeStyle={activeStyle}\n                className='nav-link'>\n                  Battle\n              </NavLink>\n            </li>\n          </ul>\n          <button\n            style={{fontSize: 30}}\n            className='btn-clear'\n            onClick={toggleTheme}\n          >\n            {theme === 'light' ? 'ðŸ”¦' : 'ðŸ’¡'}\n          </button>\n        </nav>\n      )}\n    </ThemeConsumer>\n  )\n}","import React from 'react';\nimport './App.css';\nimport { ThemeProvider } from './contexts/theme';\nimport Nav from './components/Nav';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom'\nimport Loading from './components/Loading';\n\nconst Popular = React.lazy(() => import('./components/Popular'))\nconst Battle = React.lazy(() => import('./components/Battle'))\nconst Results = React.lazy(() => import('./components/Results'))\n\nexport default class App extends React.Component {\n  state = {\n    theme: 'light',\n    toggleTheme: () => {\n      this.setState(({ theme }) => ({\n        theme: theme === 'light' ? 'dark' : 'light'\n      }))\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <ThemeProvider value={this.state}>\n          <div className={this.state.theme}>\n            <div className='container'>\n              <Nav />\n\n              <React.Suspense fallback={<Loading />}>\n                <Switch>\n                  <Route exact path='/' component={Popular} />\n                  <Route exact path='/battle' component={Battle} />\n                  <Route path='/battle/results' component={Results} />\n                  <Route render={() => <h1>404</h1>} />\n                </Switch>\n              </React.Suspense>\n            </div>\n          </div>\n        </ThemeProvider>\n      </Router>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}